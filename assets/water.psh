Texture2D g_Texture;
SamplerState g_Texture_sampler;

struct PSInput
{
    float4 Pos : SV_POSITION;
    float2 UV : TEX_COORD;
    float3 Color : COLOR;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

void main(in PSInput PSIn, out PSOutput PSOut)
{
    // Muestrear textura con distorsión UV basada en el tiempo
    float4 BaseColor = g_Texture.Sample(g_Texture_sampler, PSIn.UV);
    
    // Mezclamos el color base de la textura con el color calculado en el vertex shader
    float3 LiquidColor = BaseColor.rgb * PSIn.Color;
    
    // Añadir un tono azulado para efecto de agua
    float3 WaterTint = float3(0.2, 0.4, 0.8);
    float3 FinalColor = lerp(LiquidColor, WaterTint, 0.3);
    
    PSOut.Color = float4(FinalColor, 0.9); // Ligera transparencia

#if CONVERT_PS_OUTPUT_TO_GAMMA
    // Apply gamma correction
    PSOut.Color.rgb = pow(PSOut.Color.rgb, float3(1.0 / 2.2, 1.0 / 2.2, 1.0 / 2.2));
#endif
}